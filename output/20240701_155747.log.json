{"env_info": "sys.platform: win32\nPython: 3.7.16 (default, Jan 17 2023, 16:06:28) [MSC v.1916 64 bit (AMD64)]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 2080 Ti\nCUDA_HOME: C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nMSVC: Microsoft (R) C/C++ Optimizing Compiler versione 19.40.33811 per x64\nGCC: n/a\nPyTorch: 1.13.1+cu117\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192829337\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 2019\n  - LAPACK is enabled (usually provided by MKL)\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.7\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.5\n  - Magma 2.5.4\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/actions-runner/_work/pytorch/pytorch/builder/windows/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.1+cu117\nOpenCV: 4.10.0\nMMCV: 1.5.3\nMMCV Compiler: MSVC 193030709\nMMCV CUDA Compiler: not available\nMMRotate: 0.1.0+HEAD", "config": "dataset_type = 'DOTADataset'\ndata_root = '/data2/dailh/split_ms_dota1_0/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='RResize', img_scale=(1024, 1024)),\n    dict(\n        type='RRandomFlip',\n        flip_ratio=[0.25, 0.25, 0.25],\n        direction=['horizontal', 'vertical', 'diagonal'],\n        version='oc'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 1024),\n        flip=False,\n        transforms=[\n            dict(type='RResize'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='DOTADataset',\n        ann_file='/data2/dailh/split_ms_dota1_0/trainval/annfiles/',\n        img_prefix='/data2/dailh/split_ms_dota1_0/trainval/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='RResize', img_scale=(1024, 1024)),\n            dict(\n                type='RRandomFlip',\n                flip_ratio=[0.25, 0.25, 0.25],\n                direction=['horizontal', 'vertical', 'diagonal'],\n                version='oc'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        filter_empty_gt=False,\n        version='oc'),\n    val=dict(\n        type='DOTADataset',\n        ann_file='/data2/dailh/split_ms_dota1_0/trainval/annfiles/',\n        img_prefix='/data2/dailh/split_ms_dota1_0/trainval/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='RResize'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        version='oc'),\n    test=dict(\n        type='DOTADataset',\n        ann_file='/data2/dailh/split_ms_dota1_0/test/images/',\n        img_prefix='/data2/dailh/split_ms_dota1_0/test/images/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 1024),\n                flip=False,\n                transforms=[\n                    dict(type='RResize'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        version='oc'))\nevaluation = dict(interval=12, metric='mAP')\noptimizer = dict(\n    type='AdamW',\n    lr=0.0001,\n    weight_decay=1e-05,\n    betas=(0.9, 0.999),\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            backbone=dict(lr_mult=0.1),\n            sampling_offsets=dict(lr_mult=0.1),\n            reference_points=dict(lr_mult=0.1))))\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    step=[40])\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\ncheckpoint_config = dict(interval=12)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nangle_version = 'oc'\nmodel = dict(\n    type='RotatedDeformableDETR',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='ChannelMapper',\n        in_channels=[512, 1024, 2048],\n        kernel_size=1,\n        out_channels=256,\n        act_cfg=None,\n        norm_cfg=dict(type='GN', num_groups=32),\n        num_outs=4),\n    bbox_head=dict(\n        type='RotatedDeformableDETRHead',\n        num_query=250,\n        num_classes=15,\n        in_channels=2048,\n        sync_cls_avg_factor=True,\n        as_two_stage=True,\n        transformer=dict(\n            type='RotatedDeformableDetrTransformer',\n            two_stage_num_proposals=250,\n            encoder=dict(\n                type='DetrTransformerEncoder',\n                num_layers=6,\n                transformerlayers=dict(\n                    type='BaseTransformerLayer',\n                    attn_cfgs=dict(\n                        type='MultiScaleDeformableAttention', embed_dims=256),\n                    feedforward_channels=1024,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'ffn', 'norm'))),\n            decoder=dict(\n                type='RotatedDeformableDetrTransformerDecoder',\n                num_layers=6,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(\n                            type='MultiScaleDeformableAttention',\n                            embed_dims=256)\n                    ],\n                    feedforward_channels=1024,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        positional_encoding=dict(\n            type='SinePositionalEncoding',\n            num_feats=128,\n            normalize=True,\n            offset=-0.5),\n        bbox_coder=dict(\n            type='DeltaXYWHAOBBoxCoder',\n            angle_range='oc',\n            norm_factor=None,\n            edge_swap=True,\n            proj_xy=True,\n            target_means=(0.0, 0.0, 0.0, 0.0, 0.0),\n            target_stds=(0.1, 0.1, 0.2, 0.2, 0.1)),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=2.0),\n        reg_decoded_bbox=True,\n        loss_iou=dict(type='RotatedIoULoss', loss_weight=5.0),\n        with_box_refine=True),\n    train_cfg=dict(\n        assigner=dict(\n            type='Rotated_HungarianAssigner',\n            cls_cost=dict(type='FocalLossCost', weight=2.0),\n            reg_cost=dict(type='RBBoxL1Cost', weight=2.0, box_format='xywha'),\n            iou_cost=dict(type='RotatedIoUCost', iou_mode='iou', weight=5.0))),\n    test_cfg=dict())\nfind_unused_parameters = True\nwork_dir = 'output'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 666887604, "exp_name": "deformable_detr_twostage_refine_r50_16x2_50e_dota.py"}
